const readableFormat = require('./lib/readableFormat')
const CappedClient = require('./lib/cappedClient')

module.exports = (pluginContext) => {
  const { cwd, clipboard, console } = pluginContext

  isTransient = () => {
    const badTypes = [
      'de.petermaurer.TransientPasteboardType',
      'com.typeit4me.clipping',
      'Pasteboard generator type',
      'com.agilebits.onepassword',
      'org.nspasteboard.TransientType',
      'org.nspasteboard.ConcealedType',
      'org.nspasteboard.AutoGeneratedType',
    ]
    return badTypes.find((badType) => {
      return clipboard.has(badType)
    })
  }

  getClip = (ignoreImages) => {
    const clip = {}
    if (ignoreImages) {
      clip.type = 'text'
    } else {
      clip.type = clipboard.readImage().isEmpty() ? 'text' : 'image'
    }

    if (clip.type === 'image') {
      const image = clipboard.readImage()
      const dimensions = image.getSize()
      const size = readableFormat(image.toDataURL().length * 0.75)
      clip.title = `Image: ${dimensions.width}x${dimensions.height} (${size.value}${size.unit})`
      clip.raw = image.toDataURL()
    } else {
      clip.raw = clipboard.readText()
    }
    return clip
  }

  let lastClip
  return (env = {}) => {
    const begin = Date.now()
    try {
      if (isTransient()) { return Promise.resolve() }
      const clip = getClip(env.ignoreImages)
      if (!lastClip || lastClip.type !== clip.type || lastClip.raw !== clip.raw) {
        lastClip = clip
        const clipCollection = CappedClient.init(cwd, env)
        return clipCollection.upsert(clip)
      }
      return Promise.resolve()
    } catch(e) {
      console.log('error', e)
    } finally {
      console.log('info', `monitor(): ${Date.now() - begin} ms`)
    }
  }
}
